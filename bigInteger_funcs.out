
#### `abs()`
#### `.add(number)` +
#### `and(number)`
#### `bitLength()`
#### `compare(number)`
#### `compareAbs(number)`
#### `compareTo(number)`
#### `divide(number)`
#### `divmod(number)`
#### `eq(number)`
#### `equals(number)`
#### `geq(number)`
#### `greater(number)`
#### `greaterOrEquals(number)`
#### `gt(number)`
#### `isDivisibleBy(number)`
#### `isEven()`
#### `isNegative()`
#### `isOdd()`
#### `isPositive()`
#### `isPrime(strict?)`
#### `isProbablePrime([iterations], [rng])`
#### `isUnit()`
#### `isZero()`
#### `leq(number)`
#### `lesser(number)`
#### `lesserOrEquals(number)`
#### `lt(number)`
#### `minus(number)`
#### `mod(number)`
#### `modInv(mod)`
#### `modPow(exp, mod)`
#### `multiply(number)`
#### `neq(number)`
#### `next()`
#### `not()`
#### `notEquals(number)`
#### `or(number)`
#### `over(number)`
#### `plus(number)`
#### `pow(number)`
#### `prev(number)`
#### `remainder(number)`
#### `shiftLeft(n)`
#### `shiftRight(n)`
#### `square()`
#### `subtract(number)`
#### `times(number)`
#### `toArray(radix)`
#### `toJSNumber()`
#### `xor(number)`
#### `fromArray(digits, base = 10, isNegative?)`
#### `gcd(a, b)`
#### `isInstance(x)`
#### `lcm(a,b)`
#### `max(a,b)`
#### `min(a,b)`
#### `randBetween(min, max, [rng])`
#### `toString(radix = 10, [alphabet])`
#### `valueOf()`
